그간 웹 개발을 하면서도 어떻게 동작하는지도 잘 모르고 그냥 사용했던 것 같다.
회사에서 url 에 하이푼을 사용하여 네이밍을 하라고 하였는데 그것도 그냥 쓰라고하니 썼던 것 같다.
그래서 한번 왜 그렇게 사용하는지 알아보고자 찾아보았다.

우선 REST API 의 용어를 찾아 보았다.
-REST(Representational State Transfer)란 HTTP 네트워크 상의 리소스를 정의하고 해당 리소스를 URI라는 고유의 주소로 접근하는 접근방식이다.
-REST API란 REST 방식을 통해서 리소스에 접근하기 위한 서비스 API 이다.

그리고 사용되는 METHOD 들을 보니 평소에 CRUD 에 사용되는 HTTP 메소드 GET, POST, PUT, DELETE 등이 있었다.
처음에는 아예 처음들어보는 RESTful API 용어로 얘기하길래 어려웠는데 사용되는 메소드들을 보고 감을 잡았다.

REST를 사용하는 이유는 HTTP의 장점을 최대한 활용할 수 있는 아키텍처로써 URL 로 자원을 표현하는데 집중하고, 자원의 상태에 대한 정의를 HTTP METHOD 로 하는 것이다.


REST API 특징
1. 서버-클라이언트 구조
	리소스가 있는 쪽이 Server, 리소스를 요청하는 쪽이 Client 이다.
	Server : API 를 제공하고 비즈니스 로직 처리 및 저장을 책임진다.
	Client : 사용자 입장에서의 정보(리소스)를 서버에 요청하여 받는다.
	그래서 서로간의 의존성이 줄어든다.

2. 무상태성
	클라이언트의 context를 서버에 저장하지 않아 구현이 단순해진다.
	서버는 클라이언트의 요청을 각각의 요청으로 인식하고 처리한다. 이는 sync 같이 이전 요청이 다음 요청의 처리에 연관되서는 안된다.

3. 캐싱기능
	대량의 요청을 효율적으로 처리하기 위해 캐시를 사용하며, 캐시 사용을 통해 응답시간이 빨라지고 트랜잭션이 발생하지 않기 때문에 전체 응답시간, 성능, 서버의 자원 이용률을 향상시킬수 있다.

4. 계층화
	클라이언트는 REST API Server만 호출한다.

5. 인터페이스 일관성
	URL로 지정한 리소스에 대한 조작을 통일되고 한정적인 인터페이스로 수행한다.
	HTTP 표준 프로토콜을 따르는 모든 플랫폼에서 사용이 가능하다.


REST API 설계 규칙
1. 슬래시 구분자(/)는 계층 관계를 나타내는데 사용한다.
2. URP 마지막 문자로 슬래시(/)를 포함하지 않는다.
3. 하이픈(-)은 가독성을 높이는데 사용한다.
4. 밑줄(_)은 사용하지 않는다.
5. URL 경로에는 소문자를 사용한다.
6. 파일확장자는 URL에 포함하지 않는다.


REST API 응답상태코드
1XX : 전송 프로토콜 수준의 정보 교환
2XX : 클라이언트 요청이 성공적으로 수행됨
3XX : 클라이언트는 요청을 완료하기 위해 추가적인 행동필요
4XX : 클라이언트의 잘못된 요청
5XX : 서버쪽 오류로 인한 상태코드


용어만 들었을땐 전혀 모르는거였는데 이렇게 찾아보니까 사용하던 내용들이어서 친숙했던 것 같다.