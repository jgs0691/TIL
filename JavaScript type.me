입사이후 친하게 지내던 사원분들이 대리를 달았다.
직급이 올라감에 있어 연봉이 얼마나 오르는지는 잘 모르겠지만 먼저 축하할 일이다.
나에게 많은 도움을 주신분들이 대리라니..!! 아무튼...
공부에 박차를 올리기 시작하면서 나의 실력을 제일 많이 끌어올려주신 대리님께서 JavaScript 의 타입과 자료구조를 한번 찾아보라고 하셔서 공부를 해보려고한다.

그리하여
오늘의 TIL

JavaScript 의 타입과 자료구조
참고 : https://developer.mozilla.org/ko/docs/Web/JavaScript/Data_structures

JavaScript 는 동적 타입의 언어이다.
그래서 변수는 어떤 특정 타입과 연결되지 않으며, 모든 타입의 값으로 할당 및 재할당이 가능하다.
(var 변수 하나 쳐두면 그걸로 지지고 볶고 완전히 바꿔서 result 도 할 수 있다는게 너무 좋은 것 같다...)
ex)
var a = 10 // 숫자
a = "문자열" // 문자열
a = true // 불린
a = [] // 배열
이렇게 타입을 막 바꿔도 문제가 생기지 않는다.

JavaScript 의 타입은 원시 값과 객체로 나뉜다.
(내가 지금껏 알고있던 타입은 Boolean, Null, Undefined, Number, String)
-원시값
1. Boolean 타입 - 논리 요소를 나타내는 true, false 두 가지의 참과 거짓의 값을 가질 수 있다.
2. Null 타입 - null 하나의 값만 가질 수 있다.
3. Undefined 타입 - 값을 할당하지 않은 변수는 undefined 값을 가진다.
4. Number 타입 - 숫자 타입을 가지고 있다.
5. BigInt 타입 - 숫자 타입을 가지고, 큰 정수를 가지고도 안전하게 연산을 할 수 있다. (숫자 뒤에 n을 추가하여 생성자를 호출하거나 생성한다.)
6. String 타입 - 텍스트 타입을 가진다. JavaScript 에서는 문자열을 변경할 수 없다. 하지만 원본 문자열을 통해서 새로운 문자열을 생성하는 것은 가능하다.
(와... 나 이거 이전에 문자열[i] = 문자열[i].replace("삭제할 단어",""); 이런식으로 사용하려고 했었는데 안되는 이유가 이거구나...)
7. Symbol 타입 - 변경 불가능한 고유한 원시 값을 말하고 객체의 속성키로 사용할 수 있다.

-객체 (속성의 컬렉션)
객체란 식별자로 참조할 수 있는 메모리 상의 값을 말한다.
객체는 속성의 컬렉션으로 볼 수 있다. 제한적으로 속성을 초기화할 수 있고, 그 후에 속성을 추가하거나 제거할 수 있다.
속성 값으로는 다른 객체를 포함해 모든 타입을 사용할 수 있어 복잡한 자료구조의 구축이 가능하다.
속성은 '키' 값으로 식별하며, 키 값으로는 문자열 값이나 심볼을 사용 할 수 있다.

대충 내가 지금 지식으로 유추해보건데 내가 공부하고있는 표준내장 객체들을 컬렉션으로 만들어서 우리가 사용할 때 키로 받아와서 원하는 내용을 사용하는거 아닐까... 라는 생각..?
현재로서는 나에게 객체쪽 내용이 너무 어려워져서 이해가 잘 안되서 요기까지 알아보려고 한다.
나중에 더 깊이 파도 이해가 가능할 수 있는 정도로 성장할 수 있을까?

나중에 이해가 되고, 기회가 되면 수정하러 와야겠다.

결론은... 동적 타입의 자바스크립트... 너무 좋아.... (안좋다고 얘기하는것도 보긴했는데 typeScript 라던가..)
BigInt 타입과 Symbol 타입이라는 것의 존재를 알아간 것에 만족하자.
끗!